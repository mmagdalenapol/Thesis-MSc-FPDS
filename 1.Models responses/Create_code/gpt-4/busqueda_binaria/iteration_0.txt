The algorithm you have described is known as Binary Search. It's a very efficient way to find an element in a sorted list by repeatedly dividing the search interval in half. If the value of the search key is less than the item in the middle of the interval, the algorithm narrows the interval to the lower half. Otherwise, it narrows it to the upper half. This process continues until the value is found or the interval is empty.

Here is a Python code implementing the binary search algorithm:

```python
def binary_search(sorted_list, target):
    low = 0
    high = len(sorted_list) - 1
    
    while low <= high:
        mid = (low + high) // 2
        mid_value = sorted_list[mid]
        
        if mid_value == target:
            return mid  # Return the index of the target
        elif mid_value < target:
            low = mid + 1
        else:
            high = mid - 1
            
    return -1  # Target not found in the sorted list

# Example usage:
sorted_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
target = 13
result = binary_search(sorted_list, target)

if result != -1:
    print(f"Target found at index {result}.")
else:
    print("Target not found in the list.")
```

This code defines a function `binary_search` that takes a sorted list and a target value to find. It returns the index of the target if found, and `-1` if not. The example usage shows you how to use this function with a sorted list and a target number.