Here is the code that implements the described steps:

```python
def find_element(a, x):
    while len(x) > 2:
        mid = len(x) // 2
        if x[mid] == a:
            return mid
        elif x[mid] < a:
            x = x[mid:]
        else:
            x = x[:mid]
    
    if len(x) == 2:
        if x[0] == a:
            return 0
        elif x[1] == a:
            return 1
    
    return -1

# Example usage
sorted_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
number_to_find = 13

result = find_element(number_to_find, sorted_list)
if result != -1:
    print(f"Element {number_to_find} found at index {result}")
else:
    print(f"Element {number_to_find} not found")
```

In this code snippet:
- The `find_element` function takes a number `a` and a sorted list `x` as input.
- It repeatedly divides the list `x` into halves until the length of `x` becomes less than or equal to 2.
- It then checks if the middle element of the current sublist equals the number `a`. If it does, it returns the index.
- If not, it updates the sublist based on the comparison and continues the process.
- If the length of `x` becomes 2, it checks the two elements for equality with `a` and returns the index if found.
- If the element is not found in the list, the function returns -1.

You can test this code with different sorted lists and numbers to find in those lists.