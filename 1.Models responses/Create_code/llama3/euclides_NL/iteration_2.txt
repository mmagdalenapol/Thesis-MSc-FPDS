Here is the Python code that performs the steps you described:
```
def euclidean_division(a, b):
    # Verify if a and b are two positive integers
    if not isinstance(a, int) or not isinstance(b, int) or a <= 0 or b <= 0:
        raise ValueError("Both inputs must be positive integers")

    # Perform Euclidean division
    while b != 0:
        a, b = b, a % b

    return a
```
Here's an explanation of the code:

1. The function takes two arguments `a` and `b`.
2. We check if both `a` and `b` are positive integers using `isinstance` and comparison operators. If not, we raise a `ValueError`.
3. We perform the Euclidean division using a while loop. In each iteration, we swap the values of `a` and `b` and compute the remainder of the division using the modulo operator (`%`).
4. We repeat step 3 until `b` becomes 0.
5. When `b` is 0, we return the value of `a`, which is the greatest common divisor (GCD) of the original `a` and `b`.

You can test the function with some examples:
```
print(euclidean_division(12, 15))  # Output: 3
print(euclidean_division(24, 30))  # Output: 6
print(euclidean_division(48, 18))  # Output: 6
```
Note that this implementation uses the Euclidean algorithm to compute the GCD of two numbers. The algorithm is efficient and has a time complexity of O(log min(a, b)).