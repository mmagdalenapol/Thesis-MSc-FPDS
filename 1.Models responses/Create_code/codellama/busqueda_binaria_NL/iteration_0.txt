

 Here is the Python code that performs the steps you have described:

```
def binary_search(a, x):
    # Check if the list is empty
    if len(x) == 0:
        return -1

    # Initialize the left and right pointers
    left = 0
    right = len(x) - 1

    # Perform the binary search
    while left <= right:
        # Calculate the middle position
        mid = (left + right) // 2

        # Check if the middle element is equal to a
        if x[mid] == a:
            return mid

        # If the middle element is less than a, update the left pointer
        elif x[mid] < a:
            left = mid + 1

        # If the middle element is greater than a, update the right pointer
        else:
            right = mid - 1

    # If the element is not found, return -1
    return -1
```

This code performs a binary search on a sorted list `x` to find the position of a given number `a`. It initializes two pointers, `left` and `right`, to represent the start and end of the list. Then, it iteratively calculates the middle position `mid` and checks if `x[mid]` equals `a`. If it does, it returns `mid`. If not, it updates the pointers based on whether `x[mid]` is less than or greater than `a`. It repeats this process until `left` is greater than `right`, indicating that the element was not found. In this case, it returns -1.