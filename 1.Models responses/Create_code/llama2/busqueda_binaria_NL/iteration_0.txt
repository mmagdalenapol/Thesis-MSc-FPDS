  Sure, here is a Python code that should implement the steps you described:
```
def find_a(a, x):
    mid = len(x) // 2
    while len(x) > 2:
        if x[mid] == a:
            return mid
        elif x[mid] < a:
            x = x[:mid]
        else:
            x = x[mid:]
        mid = len(x) // 2
    if x[0] == a:
        return 0
    elif x[-1] == a:
        return -1
    else:
        return -1
```
Here's an explanation of how the code works:

1. We first calculate the middle position of the list `x` and store it in the variable `mid`.
2. We check if the element at position `mid` is equal to `a`. If it is, we return `mid`.
3. If the element at position `mid` is not `a`, we check if it is less than `a`. If it is, we update the list `x` to consider only the sublist from position 0 to `mid`. Otherwise, we update the list `x` to consider only the sublist from position `mid` to the end.
4. We update the variable `mid` to be the middle position of the updated list `x`.
5. We repeat steps 2-4 until the list `x` has a length of 2 or until the element at position `mid` is equal to `a`.
6. If the list `x` has a length of 2, we check if either of the two positions has `a`. If one of the positions has `a`, we return that position. Otherwise, we return -1 to indicate that the element was not found.
7. If the element at position `mid` is equal to `a`, we return `mid`.

Here's an example of how the code works:

Suppose we have the list `[3, 1, 2, 6, 4, 5, 8, 9]` and we want to find the position of the element `5`.

1. We calculate the middle position of the list, which is `mid = 4`.
2. We check if the element at position `mid` is equal to `5`. It is not, so we proceed to step 3.
3. The element at position `mid` is `6`, which is greater than `5`. We update the list to consider only the sublist from position `mid` to the end, so the new list is `[6, 4, 5, 8, 9]`.
4. We update the variable `mid` to be the middle position of the new list, which is `mid = 3`.
5. We repeat steps 2-4 until the list has a length of 2.
6. The list now has a length of 2, so we check if either of the two positions has `5`. The element at position `mid` is `8`, which is not `5`, so we return -1 to indicate that the element was not found.

I hope this helps! Let me know if you have any questions or need further clarification.